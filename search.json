[{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"freezeframe.js","title":"freezeframe.js","text":"MIT License (MIT) Copyright (c) 2016 Christopher Antonellis Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"nanobarjs","dir":"","previous_headings":"","what":"nanobar.js","title":"freezeframe.js","text":"MIT License (MIT) Copyright (c) 2014 Jacobo Tabernero - github.com/jacoborus Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"progressbarjs","dir":"","previous_headings":"","what":"progressbar.js","title":"freezeframe.js","text":"MIT License (MIT) Copyright (c) 2015 Kimmo Brunfeldt Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"epic-spinners","dir":"","previous_headings":"","what":"epic-spinners","title":"freezeframe.js","text":"MIT License Copyright (c) 2018 Epicmax LLC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"spinkit","dir":"","previous_headings":"","what":"SpinKit","title":"freezeframe.js","text":"MIT License (MIT) Copyright (c) 2020 Tobias Ahlin Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"notiflix","dir":"","previous_headings":"","what":"Notiflix","title":"freezeframe.js","text":"MIT License Copyright (c) 2020 Notiflix Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU General Public License","title":"freezeframe.js","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"freezeframe.js","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"freezeframe.js","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"freezeframe.js","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"freezeframe.js","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"freezeframe.js","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"freezeframe.js","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"freezeframe.js","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"freezeframe.js","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"freezeframe.js","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"freezeframe.js","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"freezeframe.js","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"freezeframe.js","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"freezeframe.js","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"freezeframe.js","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"freezeframe.js","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"freezeframe.js","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"freezeframe.js","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"freezeframe.js","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"freezeframe.js","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dreamrs.github.io/shinybusy/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"freezeframe.js","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"Busy Indicator for 'Shiny' Applications Copyright (C) 2020 Victor Perrier  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. shinybusy Copyright (C) 2020 Victor Perrier This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dreamrs.github.io/shinybusy/articles/shinybusy-usage.html","id":"automatic-indicators","dir":"Articles","previous_headings":"","what":"Automatic indicators","title":"Busy indicator for shiny apps","text":"indicator displayed time calculation take timeout defined (default 1000ms), don’t intervene server. Three indicators available : spinner : add_busy_spinner().  top progress bar : add_busy_bar().  GIF animate app busy : : add_busy_gif().","code":"# Add in UI add_busy_spinner(spin = \"fading-circle\") add_busy_bar(color = \"red\", height = \"8px\") # Add in UI add_busy_gif(   src = \"https://jeroen.github.io/images/banana.gif\",   height = 70, width = 70 )"},{"path":"https://dreamrs.github.io/shinybusy/articles/shinybusy-usage.html","id":"manual-indicators","dir":"Articles","previous_headings":"","what":"Manual indicators","title":"Busy indicator for shiny apps","text":"types indicators available automatic indicators, time functions starts use_* explicitly trigger indicator server-side. spinner : use_busy_spinner() : top progress bar : use_busy_bar() : GIF : use_busy_gif() :","code":"# in UI use_busy_spinner(spin = \"fading-circle\")  # in server show_spinner() # show the spinner hide_spinner() # hide the spinner # in UI use_busy_bar(color = \"#01DF01\", height = \"15px\")  # in server update_busy_bar(0) # update with the desire value [0-100], 100 hide the bar # in UI use_busy_gif(   src = \"https://jeroen.github.io/images/banana.gif\",   height = 70, width = 70 )  # in server play_gif() # play animation stop_gif() # stop animation"},{"path":"https://dreamrs.github.io/shinybusy/articles/shinybusy-usage.html","id":"modal-indicators","dir":"Articles","previous_headings":"","what":"Modal indicators","title":"Busy indicator for shiny apps","text":"Display indicator (spinner progress bar) modal window, prevent user interact app launch calculation something already happening server. functions used server-side. Spinner :  Progress bar :  Don’t forget remove modal window computation finished !","code":"# in server show_modal_spinner() # show the modal window remove_modal_spinner() # remove it when done # in server show_modal_progress_line() # show the modal window update_modal_progress(0.2) # update progress bar value remove_modal_progress() # remove it when done"},{"path":"https://dreamrs.github.io/shinybusy/articles/spinners.html","id":"epic-spinners","dir":"Articles","previous_headings":"","what":"Epic spinners","title":"Spinners","text":"","code":"spin_epic(\"flower\") spin_epic(\"pixel\") spin_epic(\"hollow-dots\") spin_epic(\"intersecting-circles\") spin_epic(\"orbit\") spin_epic(\"radar\") spin_epic(\"scaling-squares\") spin_epic(\"half-circle\") spin_epic(\"trinity-rings\") spin_epic(\"fulfilling-square\") spin_epic(\"circles-to-rhombuses\") spin_epic(\"semipolar\") spin_epic(\"self-building-square\") spin_epic(\"swapping-squares\") spin_epic(\"fulfilling-bouncing-circle\") spin_epic(\"fingerprint\") spin_epic(\"spring\") spin_epic(\"atom\") spin_epic(\"looping-rhombuses\") spin_epic(\"breeding-rhombus\")"},{"path":"https://dreamrs.github.io/shinybusy/articles/spinners.html","id":"spin-kit","dir":"Articles","previous_headings":"","what":"Spin kit","title":"Spinners","text":"","code":"style <- \"position: relative; height: 50px; width: 50px;\" spin_kit(\"double-bounce\", style = style) spin_kit(\"circle\", style = style) spin_kit(\"bounce\", style = style) spin_kit(\"folding-cube\", style = style) spin_kit(\"rotating-plane\", style = style) spin_kit(\"cube-grid\", style = style) spin_kit(\"fading-circle\", style = style) spin_kit(\"dots\", style = style) spin_kit(\"cube\", style = style)"},{"path":"https://dreamrs.github.io/shinybusy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fanny Meyer. Author. Victor Perrier. Author, maintainer. Silex Technologies. Funder.            https://www.silex-ip.com","code":""},{"path":"https://dreamrs.github.io/shinybusy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Meyer F, Perrier V (2022). shinybusy: Busy Indicator 'Shiny' Applications. R package version 0.2.2.9200, https://github.com/dreamRs/shinybusy.","code":"@Manual{,   title = {shinybusy: Busy Indicator for 'Shiny' Applications},   author = {Fanny Meyer and Victor Perrier},   year = {2022},   note = {R package version 0.2.2.9200},   url = {https://github.com/dreamRs/shinybusy}, }"},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"shinybusy","dir":"","previous_headings":"","what":"Busy Indicator for Shiny Applications","title":"Busy Indicator for Shiny Applications","text":"Automated () busy indicator Shiny apps","code":""},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Busy Indicator for Shiny Applications","text":"Install CRAN : can install dev version shinybusy GitHub:","code":"install.packages(\"shinybusy\") remotes::install_github(\"dreamRs/shinybusy\")"},{"path":[]},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"gif","dir":"","previous_headings":"Examples","what":"Gif","title":"Busy Indicator for Shiny Applications","text":"Animate Gif server busy pause animation server idle :","code":"# Somewhere in UI add_busy_gif(src = \"https://jeroen.github.io/images/banana.gif\", height = 70, width = 70)"},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"progress-bar","dir":"","previous_headings":"Examples","what":"Progress bar","title":"Busy Indicator for Shiny Applications","text":"Make infinite progress bar appear top page server busy :","code":"add_busy_bar(color = \"#FF0000\")"},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"spinner","dir":"","previous_headings":"Examples","what":"Spinner","title":"Busy Indicator for Shiny Applications","text":"Add spinner server busy top-right corner page : Classic Shiny: Shinydashboard: Shinythemes:","code":"# UI add_busy_spinner(spin = \"fading-circle\")"},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"other-related-packages","dir":"","previous_headings":"","what":"Other related packages","title":"Busy Indicator for Shiny Applications","text":"packages provide cool alternative add progress indicator shiny application : {waiter} : Loading screens Shiny {shinycssloaders} : Add CSS loader animations Shiny outputs {shinycustomloader} : Add custom loader R shiny","code":""},{"path":"https://dreamrs.github.io/shinybusy/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Busy Indicator for Shiny Applications","text":"Development package funded Silex Technologies (https://www.silex-ip.com)","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic busy indicator (Progress bar) — add_busy_bar","title":"Automatic busy indicator (Progress bar) — add_busy_bar","text":"Make progress bar appear top page.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic busy indicator (Progress bar) — add_busy_bar","text":"","code":"add_busy_bar(   timeout = 1000,   color = \"#112446\",   centered = FALSE,   height = \"8px\" )"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic busy indicator (Progress bar) — add_busy_bar","text":"timeout Number milliseconds server busy display progress bar. color Progress bar color. centered Center progress bar . height Height bar.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic busy indicator (Progress bar) — add_busy_bar","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(      # Use this function somewhere in UI     add_busy_bar(color = \"#FF0000\"),      headerPanel('Iris k-means clustering'),      tags$br(),     actionButton(\"quick\", \"Quick calculation (nothing happens)\"),     actionButton(\"sleep\", \"Long calculation (progress bar on top)\")   )    server <- function(input, output, session) {      observeEvent(input$quick, {       Sys.sleep(0.1)     })      observeEvent(input$sleep, {       Sys.sleep(5)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic busy indicator (GIF) — add_busy_gif","title":"Automatic busy indicator (GIF) — add_busy_gif","text":"Make GIF play server busy stop idle.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic busy indicator (GIF) — add_busy_gif","text":"","code":"add_busy_gif(   src,   timeout = 100,   position = c(\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\", \"full-page\",     \"free\"),   margins = c(10, 10),   overlay_color = \"rgba(0, 0, 0, 0.5)\",   overlay_css = NULL,   height = \"50px\",   width = \"50px\" )"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic busy indicator (GIF) — add_busy_gif","text":"src Path GIF, URL file www/ folder. timeout Number milliseconds server busy display GIF. position display GIF: 'top-right', 'top-left', 'bottom-right', 'bottom-left', 'full-page'. margins Distance margins, vector length two, first element distance top/bottom, second element distance right/left. overlay_color Background color overlay position = \"full-page\". overlay_css Additional CSS overlay, example \"z-index: 1000;\" make appear everything. height, width Height width spinner, default '50px' , must specified.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_gif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic busy indicator (GIF) — add_busy_gif","text":"HTML tag used UI.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic busy indicator (GIF) — add_busy_gif","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(      # Use this function somewhere in UI     # with navBarPage use the \"header\" argument     add_busy_gif(       src = \"https://jeroen.github.io/images/banana.gif\",       height = 70, width = 70     ),      actionButton(\"sleep\", \"Long calculation\")   )    server <- function(input, output, session) {      observeEvent(input$sleep, {       Sys.sleep(5)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic busy indicator (spinner) — add_busy_spinner","title":"Automatic busy indicator (spinner) — add_busy_spinner","text":"Add spinner application time server take 100 milliseconds respond.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic busy indicator (spinner) — add_busy_spinner","text":"","code":"add_busy_spinner(   spin = \"double-bounce\",   color = \"#112446\",   timeout = 100,   position = c(\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\", \"full-page\"),   onstart = TRUE,   margins = c(10, 10),   height = \"50px\",   width = \"50px\" )"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic busy indicator (spinner) — add_busy_spinner","text":"spin Style spinner, see spin_epic spin_kit possible choices. Note spin_epic, height width ignored. color Color spinner, valid CSS format. timeout Number milliseconds server busy display spinner. position display spinner: 'top-right', 'top-left', 'bottom-right', 'bottom-left', 'full-page'. onstart Logical, display spinner application starts ? margins Distance margins, vector length two, first element distance top/bottom, second element distance right/left. height, width Height width spinner, default '50px' , must specified.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_busy_spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic busy indicator (spinner) — add_busy_spinner","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(      # Use this function somewhere in UI     add_busy_spinner(spin = \"cube-grid\"),     # or use a different spinner     # add_busy_spinner(spin = \"radar\", margins = c(10, 20)),      headerPanel('Iris k-means clustering'),      sidebarLayout(       sidebarPanel(         selectInput('xcol', 'X Variable', names(iris)),         selectInput('ycol', 'Y Variable', names(iris),                     selected=names(iris)[[2]]),         numericInput('clusters', 'Cluster count', 3,                      min = 1, max = 9),         actionButton(\"sleep\", \"Long calculation\")       ),       mainPanel(         plotOutput('plot1')       )     )   )    server <- function(input, output, session) {      selectedData <- reactive({       iris[, c(input$xcol, input$ycol)]     })      clusters <- reactive({       kmeans(selectedData(), input$clusters)     })      output$plot1 <- renderPlot({       palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",                 \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\",                 \"#999999\"))        par(mar = c(5.1, 4.1, 0, 1))       plot(selectedData(),            col = clusters()$cluster,            pch = 20, cex = 3)       points(clusters()$centers, pch = 4, cex = 4, lwd = 4)     })      observeEvent(input$sleep, {       Sys.sleep(5)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading state for Shiny Outputs — add_loading_state","title":"Loading state for Shiny Outputs — add_loading_state","text":"Call function UI automatically add loading indicators several outputs regenerated.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading state for Shiny Outputs — add_loading_state","text":"","code":"add_loading_state(   selector,   spinner = c(\"standard\", \"hourglass\", \"circle\", \"arrows\", \"dots\", \"pulse\"),   text = NULL,   timeout = 600,   svgColor = \"#383838\",   svgSize = \"45px\",   messageColor = \"#383838\",   messageFontSize = \"14px\",   backgroundColor = \"rgba(255,255,255,0.9)\",   ... )"},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading state for Shiny Outputs — add_loading_state","text":"selector CSS selector match outputs, example use \".shiny-plot-output\" select plotOutput() application, \"#my_chart\" select specific output. can use vector select multiple outputs. spinner Name spinner use. text optional text displayed spinner. timeout milliseconds, time output regenerated removing loading state. svgColor Changes SVG Icons color. can use HEX, RGB RGBA. svgSize Changes SVG Icons width height. messageColor Changes color message text. messageFontSize Changes font-size message text. backgroundColor Changes background color. can use HEX, RGB RGBA. ... options passed JavaScript method, see link available options: https://www.notiflix.com/documentation/.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading state for Shiny Outputs — add_loading_state","text":"HTML tag can use Shiny UI.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Loading state for Shiny Outputs — add_loading_state","text":"function experimental, encounter bugs bad behavior, please report issue : https://github.com/dreamRs/shinybusy/issues.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/add_loading_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loading state for Shiny Outputs — add_loading_state","text":"","code":"library(shinybusy) library(shiny)  ui <- fluidPage(    # Use once in UI   add_loading_state(     \".shiny-plot-output\",     text = \"Please wait...\",     svgColor = \"steelblue\"   ),    tags$h3(\"Loading state\"),   actionButton(\"refresh\", \"Refresh charts\"),   actionButton(\"modal\", \"Open modal window\"),    fluidRow(     column(       width = 6,       plotOutput(outputId = \"plot1\")     ),     column(       width = 6,       plotOutput(outputId = \"plot2\")     )   )  )  server <- function(input, output, session) {    output$plot1 <- renderPlot({     input$refresh     if (input$refresh > 0) {       Sys.sleep(2)     }     barplot(table(floor(runif(100) * 6)))   })    output$plot2 <- renderPlot({     input$refresh     if (input$refresh > 0) {       Sys.sleep(2)     }     plot(rnorm(50), rnorm(50))   })     observeEvent(input$modal, {     showModal(modalDialog(       title = \"Works in modal too\",       actionButton(\"refresh2\", \"Refresh chart\"),       plotOutput(outputId = \"plot3\")     ))   })    output$plot3 <- renderPlot({     input$refresh2     if (input$refresh2 > 0) {       Sys.sleep(2)     }     hist(rnorm(500))   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":null,"dir":"Reference","previous_headings":"","what":"Busy indicator at start up — busy-start-up","title":"Busy indicator at start up — busy-start-up","text":"Show full-page busy indicator application initialized, removed timeout, automatically manually server.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Busy indicator at start up — busy-start-up","text":"","code":"busy_start_up(   loader,   text = NULL,   mode = c(\"timeout\", \"auto\", \"manual\"),   timeout = 500,   color = \"#112446\",   background = \"#f0f0f0\" )  remove_start_up(timeout = 100, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Busy indicator at start up — busy-start-up","text":"loader spinner created spin_epic spin_kit simple HTML tag, include GIF (see examples). text Optional text displayed loading animation. mode remove start-page: \"timeout\", \"auto\" \"manual\", see details. timeout Time (milliseconds) wait removing start-page. color Color text. background Background color. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Busy indicator at start up — busy-start-up","text":"HTML tag can included UI definition.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Busy indicator at start up — busy-start-up","text":"Behavior according mode argument: timeout: Busy indicator removed time (milliseconds) specified timeout. manual: Busy indicator removed remove_start_up server, timeout busy_start_up ignored favor remove_start_up. auto: Busy indicator removed JavaScript shiny:idle triggered first time, timeout taken account. using timeout auto, can still remove busy indicator remove_start_up.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/busy-start-up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Busy indicator at start up — busy-start-up","text":"","code":"# with timeout ------------------------------------------------------------  library(shiny) library(shinybusy)  ui <- fluidPage(    busy_start_up(     loader = spin_epic(\"orbit\", color = \"#FFF\"),     text = \"Loading...\",     timeout = 1500,     color = \"#FFF\",     background = \"#112446\"   ),    tags$h1(\"Ready to play!\", class = \"text-center\")  )  server <- function(input, output, session) {  }  if (interactive())   shinyApp(ui, server)  # manual ------------------------------------------------------------------  library(shiny) library(shinybusy)  ui <- fluidPage(    busy_start_up(     loader = spin_kit(       spin = \"cube-grid\",       color = \"#FFF\",       style = \"width:50px; height:50px;\"     ),     text = \"Loading...\",     mode = \"manual\",     color = \"#FFF\",     background = \"#112446\"   ),    tags$h1(\"Ready to play!\", class = \"text-center\")  )  server <- function(input, output, session) {    observe({     Sys.sleep(3)     remove_start_up()   })  }  if (interactive())   shinyApp(ui, server)   # auto & GIF --------------------------------------------------------------  library(shiny) library(shinybusy)  ui <- fluidPage(    busy_start_up(     loader = tags$img(       src = \"https://jeroen.github.io/images/banana.gif\",       width = 100     ),     text = \"Loading...\",     mode = \"auto\"   ),    tags$h1(\"Ready to play!\", class = \"text-center\"),   plotOutput(outputId = \"plot\")  )  server <- function(input, output, session) {    output$plot <- renderPlot({     Sys.sleep(2)     plot(rnorm(100))   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinybusy/reference/html-dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"HTML dependencies used by shinybusy — html-dependencies","title":"HTML dependencies used by shinybusy — html-dependencies","text":"HTML dependencies used shinybusy","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/html-dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTML dependencies used by shinybusy — html-dependencies","text":"","code":"html_dependency_spinkit()  html_dependency_epic()  html_dependency_shinybusy()  html_dependency_freezeframe()  html_dependency_nanobar()  html_dependency_notiflix()"},{"path":"https://dreamrs.github.io/shinybusy/reference/html-dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTML dependencies used by shinybusy — html-dependencies","text":"htmlDependency.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/logo_silex.html","id":null,"dir":"Reference","previous_headings":"","what":"Silex logo for Shiny use — logo_silex","title":"Silex logo for Shiny use — logo_silex","text":"Silex logo Shiny use","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/logo_silex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silex logo for Shiny use — logo_silex","text":"","code":"logo_silex()"},{"path":"https://dreamrs.github.io/shinybusy/reference/logo_silex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silex logo for Shiny use — logo_silex","text":"Path gif","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual busy indicator (GIF) — manual-gif","title":"Manual busy indicator (GIF) — manual-gif","text":"Manual busy indicator (GIF)","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual busy indicator (GIF) — manual-gif","text":"","code":"use_busy_gif(   src,   timeout = 100,   position = c(\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\", \"full-page\",     \"free\"),   margins = c(10, 10),   overlay_color = \"rgba(0, 0, 0, 0.5)\",   overlay_css = NULL,   height = \"50px\",   width = \"50px\" )  play_gif(session = shiny::getDefaultReactiveDomain())  stop_gif(session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual busy indicator (GIF) — manual-gif","text":"src Path GIF, URL file www/ folder. timeout Number milliseconds server busy display GIF. position display GIF: 'top-right', 'top-left', 'bottom-right', 'bottom-left', 'full-page'. margins Distance margins, vector length two, first element distance top/bottom, second element distance right/left. overlay_color Background color overlay position = \"full-page\". overlay_css Additional CSS overlay, example \"z-index: 1000;\" make appear everything. height Height width spinner, default '50px' , must specified. width Height width spinner, default '50px' , must specified. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-gif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual busy indicator (GIF) — manual-gif","text":"HTML tag used UI.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual busy indicator (GIF) — manual-gif","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(      # Use this function somewhere in UI     use_busy_gif(       src = \"https://jeroen.github.io/images/banana.gif\",       height = 70, width = 70     ),      actionButton(\"play\", \"Play GIF\"),     actionButton(\"stop\", \"Stop GIF\")   )    server <- function(input, output, session) {      observeEvent(input$play, {       play_gif()     })      observeEvent(input$stop, {       stop_gif()     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-progressbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual busy indicator (progress bar) — manual-progressbar","title":"Manual busy indicator (progress bar) — manual-progressbar","text":"Declare use_busy_bar UI update value server-side update_busy_bar.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-progressbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual busy indicator (progress bar) — manual-progressbar","text":"","code":"use_busy_bar(color = \"#112446\", centered = FALSE, height = \"8px\")  update_busy_bar(value, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-progressbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual busy indicator (progress bar) — manual-progressbar","text":"color Progress bar color. centered Center progress bar . height Height bar. value new value progress bar. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-progressbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual busy indicator (progress bar) — manual-progressbar","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(     tags$h2(\"Manual nanobar\"),     use_busy_bar(color = \"#01DF01\", height = \"15px\"),     actionButton(inputId = \"go\", label = \"Go\"),     sliderInput(       inputId = \"set\", label = \"Set progress\",       min = 0, value = 0, max = 100     )   )    server <- function(input, output, session) {      observeEvent(input$go, {       update_busy_bar(0)       for (i in 1:100) {         Sys.sleep(0.1)         update_busy_bar(i)       }     })      observeEvent(input$set, {       update_busy_bar(input$set)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual busy indicator (spinner) — manual-spinner","title":"Manual busy indicator (spinner) — manual-spinner","text":"Declare use_busy_spinner UI show/hide server-side show_spinner/hide_spinner.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual busy indicator (spinner) — manual-spinner","text":"","code":"use_busy_spinner(   spin = \"double-bounce\",   color = \"#112446\",   position = c(\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\", \"full-page\"),   margins = c(10, 10),   spin_id = NULL,   height = \"50px\",   width = \"50px\" )  show_spinner(spin_id = NULL, session = shiny::getDefaultReactiveDomain())  hide_spinner(spin_id = NULL, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual busy indicator (spinner) — manual-spinner","text":"spin Style spinner, see spin_epic spin_kit possible choices. Note spin_epic, height width ignored. color Color spinner, valid CSS format. position display spinner: 'top-right', 'top-left', 'bottom-right', 'bottom-left', 'full-page'. margins Distance margins, vector length two, first element distance top/bottom, second element distance right/left. spin_id explicit id spinner, useful want use multiple spinners. height Height width spinner, default '50px' , must specified. width Height width spinner, default '50px' , must specified. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/manual-spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual busy indicator (spinner) — manual-spinner","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(      # Use this function somewhere in UI     use_busy_spinner(spin = \"fading-circle\"),      headerPanel('Iris k-means clustering'),      sidebarLayout(       sidebarPanel(         selectInput('xcol', 'X Variable', names(iris)),         selectInput('ycol', 'Y Variable', names(iris),                     selected=names(iris)[[2]]),         numericInput('clusters', 'Cluster count', 3,                      min = 1, max = 9),         actionButton(\"sleep\", \"Long calculation\")       ),       mainPanel(         plotOutput('plot1')       )     )   )    server <- function(input, output, session) {      selectedData <- reactive({       iris[, c(input$xcol, input$ycol)]     })      clusters <- reactive({       kmeans(selectedData(), input$clusters)     })      output$plot1 <- renderPlot({       palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",                 \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\",                 \"#999999\"))        par(mar = c(5.1, 4.1, 0, 1))       plot(selectedData(),            col = clusters()$cluster,            pch = 20, cex = 3)       points(clusters()$centers, pch = 4, cex = 4, lwd = 4)     })      observeEvent(input$sleep, {       show_spinner()       Sys.sleep(5)       hide_spinner()     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a modal with a GIF — modal-gif","title":"Show a modal with a GIF — modal-gif","text":"Make pop-window appear server GIF long computation, remove finished.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a modal with a GIF — modal-gif","text":"","code":"show_modal_gif(   src,   text = NULL,   height = \"100px\",   width = \"100px\",   modal_size = \"s\",   session = shiny::getDefaultReactiveDomain() )  remove_modal_gif(session = getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a modal with a GIF — modal-gif","text":"src Path GIF, URL file www/ folder. text Additional text appear spinner. height, width Height width spinner, default '50px' , must specified. modal_size One \"s\" small (default) , \"m\" medium, \"l\" large. session session object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a modal with a GIF — modal-gif","text":"","code":"if (interactive()) {    library(shiny)   library(shinybusy)    ui <- fluidPage(      tags$h1(\"Modal with spinner\"),     actionButton(\"sleep1\", \"Launch a long calculation\"),     actionButton(\"sleep2\", \"And another one\")   )    server <- function(input, output, session) {      observeEvent(input$sleep1, {       show_modal_gif(         src = \"https://jeroen.github.io/images/banana.gif\"       )       Sys.sleep(5)       remove_modal_gif()     })      observeEvent(input$sleep2, {       show_modal_gif(         src = \"https://jeroen.github.io/images/banana.gif\",         width = \"300px\", height = \"300px\",         modal_size = \"m\",         text = \"Please wait...\"       )       Sys.sleep(5)       remove_modal_gif()     })    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a modal with a progress bar — modal-progress","title":"Show a modal with a progress bar — modal-progress","text":"Make pop-window appear server spinner long computation, remove finished.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a modal with a progress bar — modal-progress","text":"","code":"show_modal_progress_line(   value = 0,   text = \"auto\",   color = \"#112446\",   stroke_width = 4,   easing = \"linear\",   duration = 1000,   trail_color = \"#eee\",   trail_width = 1,   height = \"15px\",   session = shiny::getDefaultReactiveDomain() )  show_modal_progress_circle(   value = 0,   text = \"auto\",   color = \"#112446\",   stroke_width = 4,   easing = \"linear\",   duration = 1000,   trail_color = \"#eee\",   trail_width = 1,   height = \"200px\",   session = shiny::getDefaultReactiveDomain() )  remove_modal_progress(session = getDefaultReactiveDomain())  update_modal_progress(   value,   text = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a modal with a progress bar — modal-progress","text":"value Initial value new value set. text Text display. color Main color. stroke_width Main width. easing CSS animation use, ex.: \"linear\", \"easeIn\", \"easeOut\", \"easeInOut\". duration Animation duration (milliseconds). trail_color Color shape behind main bar. trail_width Width shape behind main bar. height Container height. session session object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a modal with a progress bar — modal-progress","text":"","code":"if (interactive()) {    library(shiny)   library(shinybusy)    ui <- fluidPage(      tags$h1(\"Modal with progress bar\"),     actionButton(\"sleep1\", \"Launch a long calculation\"),     actionButton(\"sleep2\", \"And another one (different line options)\"),     tags$br(),     actionButton(\"sleep3\", \"With a circle progress bar\"),     actionButton(\"sleep4\", \"With different circle options)\")   )    server <- function(input, output, session) {      observeEvent(input$sleep1, {       show_modal_progress_line()       for (i in 1:100) {         update_modal_progress(           value = i / 100         )         Sys.sleep(0.1)       }       remove_modal_progress()     })      observeEvent(input$sleep2, {       show_modal_progress_line(         color = \"#DF0101\",         duration = 900,         easing = \"easeOut\",         text = \"Starting computation\"       )       Sys.sleep(0.1)       for (i in 1:100) {         update_modal_progress(           value = i / 100,           text = paste(\"Process\", trunc(i/10), sprintf(\"(%02d%%)\", i))         )         Sys.sleep(0.15)       }       remove_modal_progress()     })       observeEvent(input$sleep3, {       show_modal_progress_circle()       for (i in 1:100) {         update_modal_progress(           value = i / 100         )         Sys.sleep(0.1)       }       remove_modal_progress()     })      observeEvent(input$sleep4, {       show_modal_progress_circle(         color = \"#DF0101\",         duration = 900,         easing = \"easeOut\",         text = \"Starting computation\",         height = \"300px\"       )       Sys.sleep(0.1)       for (i in 1:100) {         update_modal_progress(           value = i / 100,           text = paste(\"Process\", trunc(i/10), sprintf(\"(%02d%%)\", i))         )         Sys.sleep(0.15)       }       remove_modal_progress()     })    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a modal with a spinner — modal-spinner","title":"Show a modal with a spinner — modal-spinner","text":"Make pop-window appear server spinner long computation, remove finished.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a modal with a spinner — modal-spinner","text":"","code":"show_modal_spinner(   spin = \"double-bounce\",   color = \"#112446\",   text = NULL,   session = shiny::getDefaultReactiveDomain() )  remove_modal_spinner(session = getDefaultReactiveDomain())  update_modal_spinner(text, session = shiny::getDefaultReactiveDomain())"},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a modal with a spinner — modal-spinner","text":"spin Style spinner, see spin_epic spin_kit possible choices. color Color spinner, valid CSS format. text Additional text appear spinner. session session object passed function given shinyServer.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/modal-spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a modal with a spinner — modal-spinner","text":"","code":"if (interactive()) {    library(shiny)   library(shinybusy)    ui <- fluidPage(      tags$h1(\"Modal with spinner\"),     actionButton(\"sleep1\", \"Launch a long calculation\"),     actionButton(\"sleep2\", \"And another one\")   )    server <- function(input, output, session) {      observeEvent(input$sleep1, {       show_modal_spinner()       Sys.sleep(5)       remove_modal_spinner()     })      observeEvent(input$sleep2, {       show_modal_spinner(         spin = \"cube-grid\",         color = \"firebrick\",         text = \"Please wait...\"       )       Sys.sleep(5)       remove_modal_spinner()     })    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinybusy/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Create progress indicator — progress","title":"Create progress indicator — progress","text":"Bar, circle semicircle show progress. Can used outside Shiny. Shiny can set progress value server-side.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create progress indicator — progress","text":"","code":"progress_line(   value = 0,   color = \"#112446\",   stroke_width = 4,   easing = \"linear\",   duration = 1000,   trail_color = \"#eee\",   trail_width = 1,   text = \"auto\",   text_color = \"#000\",   width = \"100%\",   height = \"15px\",   shiny_id = NULL )  progress_circle(   value = 0,   color = \"#112446\",   stroke_width = 4,   easing = \"easeInOut\",   duration = 1400,   trail_color = \"#eee\",   trail_width = 1,   text = \"auto\",   text_color = \"#000\",   width = \"200px\",   height = \"200px\",   shiny_id = NULL )  progress_semicircle(   value = 0,   color = \"#112446\",   stroke_width = 4,   easing = \"easeInOut\",   duration = 1400,   trail_color = \"#eee\",   trail_width = 1,   text = \"auto\",   text_color = \"#000\",   width = \"200px\",   height = \"100px\",   shiny_id = NULL )  update_progress(   shiny_id,   value,   text = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinybusy/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create progress indicator — progress","text":"value Initial value new value set. color Main color. stroke_width Main width. easing CSS animation use, ex.: \"linear\", \"easeIn\", \"easeOut\", \"easeInOut\". duration Animation duration (milliseconds). trail_color Color shape behind main bar. trail_width Width shape behind main bar. text Text display. text_color Text color. width Container width. height Container height. shiny_id Id use Shiny application. session Shiny session.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create progress indicator — progress","text":"htmlwidget object.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create progress indicator — progress","text":"","code":"# Default usage progress_line(value = 0.5) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  # change color progress_line(value = 0.5, color = \"firebrick\") #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator  # Circle progress_circle(value = 0.5) #> Error in x$width %||% settings$fig.width * settings$dpi: non-numeric argument to binary operator   # Shiny usage if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(     tags$h2(\"Progress bars examples\"),     fluidRow(       column(         width = 4,         tags$p(\"Default bar:\"),         progress_line(value = 0, shiny_id = \"bar\"),         sliderInput(           inputId = \"update_bar\",           label = \"Update:\",           min = 0, max = 1,           value = 0, step = 0.1         ),         tags$p(\"Set custom text:\"),         progress_line(           value = 0.5,           text = \"To update\",           shiny_id = \"text\"         ),         textInput(           inputId = \"update_text\",           label = \"Update:\"         )       ),       column(         width = 4,         tags$p(\"Default circle:\"),         progress_circle(value = 0, shiny_id = \"circle\"),         sliderInput(           inputId = \"update_circle\",           label = \"Update:\",           min = 0, max = 1,           value = 0, step = 0.1,           width = \"100%\"         )       ),       column(         width = 4,         tags$p(\"Default semi-circle:\"),         progress_semicircle(value = 0, shiny_id = \"semicircle\"),         sliderInput(           inputId = \"update_semicircle\",           label = \"Update:\",           min = 0, max = 1,           value = 0, step = 0.1,           width = \"100%\"         )       )     )   )    server <- function(input, output, session) {      observe({       update_progress(\"bar\", input$update_bar)     })      observe({       update_progress(\"circle\", input$update_circle)     })      observe({       update_progress(\"semicircle\", input$update_semicircle)     })      observe({       req(input$update_text)       update_progress(\"text\", 0.5, input$update_text)     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_epic.html","id":null,"dir":"Reference","previous_headings":"","what":"Epic spinners — spin_epic","title":"Epic spinners — spin_epic","text":"Via https://epic-spinners.epicmax.co/.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_epic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epic spinners — spin_epic","text":"","code":"spin_epic(   spin = c(\"flower\", \"pixel\", \"hollow-dots\", \"intersecting-circles\", \"orbit\", \"radar\",     \"scaling-squares\", \"half-circle\", \"trinity-rings\", \"fulfilling-square\",     \"circles-to-rhombuses\", \"semipolar\", \"self-building-square\", \"swapping-squares\",     \"fulfilling-bouncing-circle\", \"fingerprint\", \"spring\", \"atom\", \"looping-rhombuses\",     \"breeding-rhombus\"),   color = \"#112446\" )"},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_epic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epic spinners — spin_epic","text":"spin Name spinner. color Color spinner.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_epic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epic spinners — spin_epic","text":"HTML tag.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_epic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epic spinners — spin_epic","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(     tags$h2(\"Epic spinner demo\"),     lapply(       X = c(         \"flower\", \"pixel\", \"hollow-dots\",         \"intersecting-circles\", \"orbit\", \"radar\",         \"scaling-squares\", \"half-circle\",         \"fulfilling-square\", \"circles-to-rhombuses\"       ),       FUN = function(x) {         tags$div(           style = \"display: table-cell; width: 150px; height: 100px; margin: 10px;\",           tags$b(x),           spin_epic(x, color = \"#08298A\")         )       }     ),     tags$hr(),     lapply(       X = c(         \"semipolar\", \"self-building-square\", \"swapping-squares\",         \"fulfilling-bouncing-circle\", \"fingerprint\", \"spring\",         \"atom\", \"looping-rhombuses\", \"breeding-rhombus\", \"trinity-rings\"       ),       FUN = function(x) {         tags$div(           style = \"display: table-cell; width: 150px; height: 100px; margin: 10px;\",           tags$b(x),           spin_epic(x, color = \"#08298A\")         )       }     )   )    server <- function(input, output, session) {    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_kit.html","id":null,"dir":"Reference","previous_headings":"","what":"SpinKit spinners — spin_kit","title":"SpinKit spinners — spin_kit","text":"Via https://tobiasahlin.com/spinkit/.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_kit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpinKit spinners — spin_kit","text":"","code":"spin_kit(   spin = c(\"double-bounce\", \"circle\", \"bounce\", \"folding-cube\", \"rotating-plane\",     \"cube-grid\", \"fading-circle\", \"dots\", \"cube\"),   color = \"#112446\",   style = NULL )"},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_kit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpinKit spinners — spin_kit","text":"spin Name spinner. color Color spinner. style NULL, add div container specified style.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_kit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpinKit spinners — spin_kit","text":"HTML tag.","code":""},{"path":"https://dreamrs.github.io/shinybusy/reference/spin_kit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpinKit spinners — spin_kit","text":"","code":"if (interactive()) {   library(shiny)   library(shinybusy)    ui <- fluidPage(     tags$h2(\"SpinKit demo\"),     fluidRow(lapply(       X = c(         \"circle\", \"bounce\", \"folding-cube\", \"rotating-plane\", \"cube-grid\",         \"fading-circle\", \"double-bounce\", \"dots\", \"cube\"       ),       FUN = function(x) {         column(           width = 2,           tags$b(x),           tags$div(             style = \"width: 60px; height: 60px; position: relative;\",             spin_kit(spin = x)           )         )       }     ))   )    server <- function(input, output, session) {    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-022","dir":"Changelog","previous_headings":"","what":"shinybusy 0.2.2","title":"shinybusy 0.2.2","text":"CRAN release: 2020-09-27 Fixed bug spin_kit() (#12).","code":""},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-021","dir":"Changelog","previous_headings":"","what":"shinybusy 0.2.1","title":"shinybusy 0.2.1","text":"CRAN release: 2020-09-10 New function add_loading_state() add loading state several outputs. New function busy_start_up() add start-page application ready used. HTML dependencies used package now exported, see html_dependency_* functions.","code":""},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-020","dir":"Changelog","previous_headings":"","what":"shinybusy 0.2.0","title":"shinybusy 0.2.0","text":"CRAN release: 2019-10-29 New htmlwidgets progressbar.js : see functions progress_line() progress_circle(). New functions show_modal_spinner() remove_modal_spinner() show modal spinner remove . New functions show_modal_progress_line(), show_modal_progress_circle(), update_modal_progress() remove_modal_progress() show modal progress bar, update remove . New spinners available, see spin_epic() demo, online version : https://dreamrs.github.io/shinybusy/articles/spinners.html Two new vignettes available : vignette(\"shinybusy-usage\", package = \"shinybusy\") vignette(“spinners”, package = “shinybusy”).","code":""},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-013","dir":"Changelog","previous_headings":"","what":"shinybusy 0.1.3","title":"shinybusy 0.1.3","text":"CRAN release: 2019-08-19 Fix bug IE.","code":""},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-012","dir":"Changelog","previous_headings":"","what":"shinybusy 0.1.2","title":"shinybusy 0.1.2","text":"CRAN release: 2019-05-07 Bugfix: change color ‘busy-bar’. Bugfix: overlay full page mode spinner.","code":""},{"path":"https://dreamrs.github.io/shinybusy/news/index.html","id":"shinybusy-011","dir":"Changelog","previous_headings":"","what":"shinybusy 0.1.1","title":"shinybusy 0.1.1","text":"CRAN release: 2019-04-23 First release : add spinner, progress bar, gif indicate application busy.","code":""}]
