% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/busy-modal.R
\name{modal-progress}
\alias{modal-progress}
\alias{show_modal_progress}
\alias{remove_modal_progress}
\alias{update_modal_progress}
\title{Show a modal with a progress bar}
\usage{
show_modal_progress(title = NULL, total = NULL, display_pct = FALSE,
  size = NULL, status = NULL, striped = FALSE, range_value = NULL,
  unit_mark = "\%", session = shiny::getDefaultReactiveDomain())

remove_modal_progress(session = getDefaultReactiveDomain())

update_modal_progress(value, total = NULL, title = NULL,
  status = NULL, range_value = NULL, unit_mark = "\%",
  session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{title}{character, optional title.}

\item{total}{Used to calculate percentage if value > 100, force an indicator to appear on top right of the progress bar.}

\item{display_pct}{logical, display percentage on the progress bar.}

\item{size}{Size, `NULL` by default or a value in 'xxs', 'xs', 'sm', only work with package `shinydashboard`.}

\item{status}{Color, must be a valid Bootstrap status : primary, info, success, warning, danger.}

\item{striped}{logical, add a striped effect.}

\item{range_value}{Default is to display percentage (\code{[0, 100]}), but you can specify a custom range, e.g. \code{-50, 50}.}

\item{unit_mark}{Unit for value displayed on the progress bar, default to \code{"\%"}.}

\item{session}{The \code{session} object passed to function given to \code{shinyServer}.}

\item{value}{Value of the progress bar between 0 and 100, if >100 you must provide total.}
}
\description{
Make a pop-up window appear from the server
 with a spinner during long computation, remove it when finished.
}
\examples{
if (interactive()) {

  library(shiny)
  library(shinybusy)

  ui <- fluidPage(

    tags$h1("Modal with progress bar"),
    actionButton("sleep1", "Launch a long calculation"),
    actionButton("sleep2", "And another one")
  )

  server <- function(input, output, session) {

    observeEvent(input$sleep1, {
      show_modal_progress()
      for (i in 1:100) {
        update_modal_progress(
          value = i
        )
        Sys.sleep(0.1)
      }
      remove_modal_progress()
    })

    observeEvent(input$sleep2, {
      show_modal_progress(
        display_pct = TRUE,
        status = "success",
        title = ""
      )
      for (i in 1:100) {
        update_modal_progress(
          value = i,
          title = paste("Process", trunc(i/10))
        )
        Sys.sleep(0.1)
      }
      remove_modal_progress()
    })

  }

  shinyApp(ui, server)

}
}
